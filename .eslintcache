[{"C:\\Project\\ReactDemo\\my-app\\src\\index.js":"1","C:\\Project\\ReactDemo\\my-app\\src\\Qrterminal\\Qrterminal.js":"2","C:\\Project\\ReactDemo\\my-app\\src\\hook-tutorials\\Demo1.js":"3","C:\\Project\\ReactDemo\\my-app\\src\\user\\User.js":"4","C:\\Project\\ReactDemo\\my-app\\src\\alert-dialog\\AlertDialog.js":"5","C:\\Project\\ReactDemo\\my-app\\src\\Qrterminal\\QrterminalHook.js":"6","C:\\Project\\ReactDemo\\my-app\\src\\state-tutorial\\Counter.js":"7","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\QrterminalHook.js":"8","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\Qrterminal.js":"9","C:\\Project\\ReactDemo\\my-app\\src\\pagination\\pagination.js":"10","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\detail\\detail.js":"11","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\add\\add.js":"12","C:\\Project\\ReactDemo\\my-app\\src\\Example.js":"13","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\api-context\\call-api.js":"14","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\api-context\\api-context.js":"15","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\common-function.js":"16","C:\\Project\\ReactDemo\\my-app\\src\\fomik\\check-email.js":"17"},{"size":216,"mtime":1610966112463,"results":"18","hashOfConfig":"19"},{"size":3232,"mtime":1610593614731,"results":"20","hashOfConfig":"19"},{"size":415,"mtime":1610527786810,"results":"21","hashOfConfig":"19"},{"size":8177,"mtime":1610530488410,"results":"22","hashOfConfig":"19"},{"size":1692,"mtime":1610697973752,"results":"23","hashOfConfig":"19"},{"size":3797,"mtime":1610614046750,"results":"24","hashOfConfig":"19"},{"size":553,"mtime":1610694332549,"results":"25","hashOfConfig":"19"},{"size":3437,"mtime":1610942885579,"results":"26","hashOfConfig":"19"},{"size":3230,"mtime":1610942885571,"results":"27","hashOfConfig":"19"},{"size":705,"mtime":1610696250174,"results":"28","hashOfConfig":"19"},{"size":1781,"mtime":1610938032793,"results":"29","hashOfConfig":"19"},{"size":5307,"mtime":1610965101245,"results":"30","hashOfConfig":"19"},{"size":1234,"mtime":1610703104643,"results":"31","hashOfConfig":"19"},{"size":466,"mtime":1610940875601,"results":"32","hashOfConfig":"19"},{"size":98,"mtime":1610940069876,"results":"33","hashOfConfig":"19"},{"size":427,"mtime":1610941170432,"results":"34","hashOfConfig":"19"},{"size":1984,"mtime":1610966157450,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aj6imp",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Project\\ReactDemo\\my-app\\src\\index.js",[],"C:\\Project\\ReactDemo\\my-app\\src\\Qrterminal\\Qrterminal.js",["81"],"import React from \"react\";\r\nimport {Button, Table} from \"react-bootstrap\";\r\n\r\nclass Qrterminal extends React.Component {\r\n\r\n    tableStyle = {\r\n        border: 1,\r\n        borderColor: \"blue\",\r\n        width: 1200,\r\n        borderStyle: \"solid\"\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n    }\r\n\r\n    getData() {\r\n        fetch('http://localhost:8080/qr-terminal?pageNo=1&pageSize=20')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result.value.Result,\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error: 'System error',\r\n                        item: []\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/qr-terminal?pageNo=1&pageSize=10')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result.value.Result,\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error: 'System error',\r\n                        item: []\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const {error, isLoaded, items} = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Button onClick={this.getData.bind(this)}>LoadPage</Button>\r\n                    <Table striped bordered hover style={this.tableStyle}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>ID</td>\r\n                            <td>Terminal ID</td>\r\n                            <td>Terminal Name</td>\r\n                            <td>Terminal Address</td>\r\n                            <td>Merchant ID</td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.items.map((qrterminal, i) => (<TableData key={i} qrterminal={qrterminal}/>))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass TableData extends React.Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.qrterminal.id}</td>\r\n                <td>{this.props.qrterminal.terminalId}</td>\r\n                <td>{this.props.qrterminal.terminalName}</td>\r\n                <td>{this.props.qrterminal.terminalAddress}</td>\r\n                <td>{this.props.qrterminal.merchantId}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Qrterminal;\r\n",["82","83"],"C:\\Project\\ReactDemo\\my-app\\src\\hook-tutorials\\Demo1.js",["84"],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction Demo1() {\r\n    // Declare a new state variable, which we'll call \"count\"\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        document.title = `You clicked ${count} times`;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Demo1;\r\n",["85","86"],"C:\\Project\\ReactDemo\\my-app\\src\\user\\User.js",["87"],"import React from \"react\";\r\nimport {Button, Col, Container, Form, FormGroup, Row, Table} from 'react-bootstrap';\r\nimport Popup from \"reactjs-popup\";\r\nimport AlertDialog from \"../alert-dialog/AlertDialog\";\r\n\r\nclass User extends React.Component {\r\n\r\n    tableStyle = {\r\n        border: 1,\r\n        borderColor: \"blue\",\r\n        width: 600,\r\n        borderStyle: \"solid\"\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listUser: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Nguyen Van Quang',\r\n                    age: 23,\r\n                    dateOfBirth: '02/07/1998'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"Nguyen Van Bac\",\r\n                    age: 29,\r\n                    dateOfBirth: \"02/07/1993\"\r\n                },\r\n            ],\r\n            id: '',\r\n            name: '',\r\n            age: '',\r\n            dateOfBirth: '',\r\n            isLoading: false,\r\n            qrterminalList: [],\r\n            error: ''\r\n        };\r\n    }\r\n\r\n    addUser() {\r\n        console.log(\"name in state: \" + this.state.name);\r\n        let user = {\r\n            name: this.refs.name.value,\r\n            age: this.refs.age.value,\r\n            dateOfBirth: this.refs.dateOfBirth.value,\r\n        };\r\n\r\n        let listUser = this.state.listUser.slice();\r\n        user.id = listUser[listUser.length - 1].id + 1;\r\n        listUser.push(user);\r\n        this.setState({listUser: listUser});\r\n    }\r\n\r\n    refreshForm() {\r\n        this.setState({\r\n            name: '',\r\n            age: '',\r\n            dateOfBirth: '',\r\n        });\r\n    }\r\n\r\n    editUser(userEdit) {\r\n\r\n        let user = {\r\n            id: userEdit.id,\r\n            name: this.refs.name.value,\r\n            age: this.refs.age.value,\r\n            dateOfBirth: this.refs.dateOfBirth.value\r\n        };\r\n\r\n        let index;\r\n        let listUser = this.state.listUser.slice();\r\n        for (let i = 0; i < listUser.length; i++) {\r\n            if (listUser[i].id === userEdit.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        if (index !== undefined) {\r\n            listUser.splice(index, 1);\r\n            console.log(user);\r\n            listUser.splice(index, 0, user);\r\n            this.setState({listUser: listUser});\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            id: event.target.value.id,\r\n            name: event.target.value.name,\r\n            age: event.target.value.age,\r\n            dateOfBirth: event.target.value.dateOfBirth\r\n        });\r\n    }\r\n\r\n    deleteUser(id) {\r\n        let index;\r\n        let listUser = this.state.listUser.slice();\r\n        for (let i = 0; i < listUser.length; i++) {\r\n            if (listUser[i].id === id) {\r\n                index = i;\r\n            }\r\n        }\r\n        listUser.splice(index, 1);\r\n        this.setState({listUser: listUser});\r\n        window.alert(\"Delete user successful!\")\r\n    }\r\n\r\n\r\n    getData() {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('localhost:8080/qr-terminal?pageNo=1&pageSize=10')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoading: true,\r\n                        qrterminalList: result.value\r\n                    })\r\n                },\r\n                (error)=>{\r\n                    this.setState({\r\n                        qrterminalList: [],\r\n                        error: 'Loi he thong'\r\n                    })\r\n                }\r\n            )\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            id: event.target.value.id,\r\n            name: event.target.value.name,\r\n            age: event.target.value.age,\r\n            dateOfBirth: event.target.value.dateOfBirth\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={7}>\r\n                            <h2>Danh sách người dùng</h2>\r\n                            <Table striped bordered hover style={this.tableStyle}>\r\n                                <thead>\r\n                                <tr>\r\n                                    <td>Họ và tên</td>\r\n                                    <td>Tuổi</td>\r\n                                    <td>Ngày sinh</td>\r\n                                    <td colSpan={2}>Chức năng</td>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {this.state.listUser.map((user, i) =>\r\n                                    <TableData key={i} user={user} editUser={this.editUser.bind(this, user)}\r\n                                               deleteUser={this.deleteUser.bind(this, user.id, \"ahihi\")}/>)}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                        <Col lg={5}>\r\n                            <h2>Thông tin người dùng</h2>\r\n                            <Form>\r\n                                <FormGroup controlId={\"name\"}>\r\n                                    <Form.Label>Nhập tên:</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Nhập tên\"\r\n                                                  ref=\"name\" value={this.state.name}\r\n                                                  onChange={this.handleChange.bind(this)}/>\r\n                                    <Form.Text className=\"text-muted\">Trường này không được bỏ trống</Form.Text>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup controlId={\"age\"}>\r\n                                    <Form.Label>Nhập tuổi:</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Nhập tuổi\"\r\n                                                  ref=\"age\" value={this.state.age}\r\n                                                  onChange={this.handleChange.bind(this)}/>\r\n                                    <Form.Text className=\"text-muted\">Trường này không được bỏ trống</Form.Text>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup controlId={\"dateOfBirth\"}>\r\n                                    <Form.Label>Nhập ngày sinh:</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Nhập ngày sinh\"\r\n                                                  ref=\"dateOfBirth\" value={this.state.dateOfBirth}\r\n                                                  onChange={this.handleChange.bind(this)}/>\r\n                                    <Form.Text className=\"text-muted\">Trường này không được bỏ trống</Form.Text>\r\n                                </FormGroup>\r\n                                <Button variant=\"primary\" onClick={this.addUser.bind(this)}>Thêm người</Button>\r\n                                <Button variant=\"warning\" onClick={this.refreshForm.bind(this)}>Làm mới</Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TableData extends React.Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.user.name}</td>\r\n                <td>{this.props.user.age}</td>\r\n                <td>{this.props.user.dateOfBirth}</td>\r\n                <td>\r\n                    <Button variant={\"outline-info\"} onClick={this.props.editUser}>Edit</Button>\r\n                </td>\r\n                <td>\r\n                    <Button variant={\"outline-danger\"} onClick={this.props.deleteUser}>Delete</Button>\r\n                </td>\r\n                <td>\r\n                    <Popup trigger={<Button variant={\"outline-danger\"}>Popup</Button>}\r\n                           position=\"right center\">\r\n                        <AlertDialog/>\r\n                    </Popup>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;\r\n","C:\\Project\\ReactDemo\\my-app\\src\\alert-dialog\\AlertDialog.js",["88"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nexport default function AlertDialog() {\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} disableBackdropClick={true}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\">\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Use Google's location service?\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Let Google help apps determine location. This means sending anonymous location data to\r\n                        Google, even when no apps are running.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Disagree\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n",["89","90"],"C:\\Project\\ReactDemo\\my-app\\src\\Qrterminal\\QrterminalHook.js",["91","92"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, Card, Form, FormGroup, Table} from \"react-bootstrap\";\r\nimport './qrterminal.css';\r\nimport Popup from \"reactjs-popup\";\r\nimport AlertDialog from \"../alert-dialog/AlertDialog\";\r\n\r\nfunction QrterminalHook() {\r\n\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [items, setItems] = useState([]);\r\n    const [keyword, setKeyword] = useState('');\r\n    const [fromDate, setFromDate] = useState(new Date());\r\n\r\n    function getData(){\r\n        fetch('http://localhost:8080/qr-terminal?pageNo=1&pageSize=20')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    setItems(result.value.Result);\r\n\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError('System error');\r\n                }\r\n            )\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:8080/qr-terminal?pageNo=1&pageSize=10')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    setItems(result.value.Result);\r\n\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError('System error');\r\n                }\r\n            )\r\n    },[]);\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Form>\r\n                        <FormGroup >\r\n                            <Form.Label>Nhập tên:</Form.Label>\r\n                            <Form.Control className= \"txt\" type=\"text\" placeholder=\"Enter keyword\"\r\n                                           value={keyword}\r\n                                          onChange={setKeyword}/>\r\n                            <Form.Text className=\"text-muted\">Trường này không được bỏ trống</Form.Text>\r\n                        </FormGroup>\r\n                        <Button variant=\"primary\" onClick={getData}>Search</Button>\r\n                    </Form>\r\n                </Card>\r\n                <Card id = \"table-card\">\r\n\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>STT</td>\r\n                            <td>ID</td>\r\n                            <td>Terminal ID</td>\r\n                            <td>Terminal Name</td>\r\n                            <td>Terminal Address</td>\r\n                            <td>Merchant ID</td>\r\n                            <td>Chức năng</td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {items.map((qrterminal, i) => (<RowData key={i} stt={i + 1} qrterminal={qrterminal}/>))}\r\n                        </tbody>\r\n                    </Table>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction RowData(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.stt}</td>\r\n            <td>{props.qrterminal.id}</td>\r\n            <td>{props.qrterminal.terminalId}</td>\r\n            <td>{props.qrterminal.terminalName}</td>\r\n            <td>{props.qrterminal.terminalAddress}</td>\r\n            <td>{props.qrterminal.merchantId}</td>\r\n            <td>\r\n                <Popup trigger={<Button>popup</Button>}>\r\n                    <div>\r\n                        <AlertDialog/>\r\n                    </div>\r\n                </Popup>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default QrterminalHook;\r\n","C:\\Project\\ReactDemo\\my-app\\src\\state-tutorial\\Counter.js",[],["93","94"],"C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\QrterminalHook.js",["95","96","97","98"],"C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\Qrterminal.js",["99"],"C:\\Project\\ReactDemo\\my-app\\src\\pagination\\pagination.js",["100","101","102","103"],"import React, {Component, useState} from \"react\";\r\nimport Pagination from \"react-js-pagination\";\r\n\r\n\r\n\r\nexport default function PaginationCustom(){\r\n\r\n    const [activePage, setActivePage] = useState(1);\r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [totalItem, setTotalItem] = useState(200);\r\n    const [pageRangeDisplay, setPageRangeDisplay] = useState(10);\r\n\r\n    return(\r\n        <div>\r\n            <Pagination\r\n                activePage={activePage}\r\n                itemsCountPerPage={pageSize}\r\n                totalItemsCount={totalItem}\r\n                pageRangeDisplayed={pageRangeDisplay}\r\n                onChange={setActivePage}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\detail\\detail.js",["104"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nexport default function Detail(props) {\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\">\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Qrterminal details\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                       <label>ID: {props.qrterminal.id}</label><br/>\r\n                        <label>Terminal ID: {props.qrterminal.terminalId}</label><br/>\r\n                        <label>Terminal ID: {props.qrterminal.terminalName}</label><br/>\r\n                        <label>Terminal ID: {props.qrterminal.terminalAddress}</label><br/>\r\n                        <label>Terminal ID: {props.qrterminal.merchantId}</label><br/>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\add\\add.js",["105","106","107","108","109"],"C:\\Project\\ReactDemo\\my-app\\src\\Example.js",[],"C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\api-context\\call-api.js",[],"C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\api-context\\api-context.js",[],"C:\\Project\\ReactDemo\\my-app\\src\\qrterminal\\common-function.js",[],"C:\\Project\\ReactDemo\\my-app\\src\\fomik\\check-email.js",[],{"ruleId":"110","severity":1,"message":"111","line":63,"column":33,"nodeType":"112","messageId":"113","endLine":63,"endColumn":38},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"110","severity":1,"message":"118","line":5,"column":19,"nodeType":"112","messageId":"113","endLine":5,"endColumn":27},{"ruleId":"114","replacedBy":"119"},{"ruleId":"116","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":134,"column":5,"nodeType":"123","messageId":"124","endLine":141,"endColumn":6},{"ruleId":"110","severity":1,"message":"125","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":18},{"ruleId":"114","replacedBy":"126"},{"ruleId":"116","replacedBy":"127"},{"ruleId":"110","severity":1,"message":"128","line":13,"column":12,"nodeType":"112","messageId":"113","endLine":13,"endColumn":20},{"ruleId":"110","severity":1,"message":"129","line":13,"column":22,"nodeType":"112","messageId":"113","endLine":13,"endColumn":33},{"ruleId":"114","replacedBy":"130"},{"ruleId":"116","replacedBy":"131"},{"ruleId":"110","severity":1,"message":"132","line":15,"column":12,"nodeType":"112","messageId":"113","endLine":15,"endColumn":18},{"ruleId":"110","severity":1,"message":"133","line":15,"column":20,"nodeType":"112","messageId":"113","endLine":15,"endColumn":29},{"ruleId":"110","severity":1,"message":"134","line":16,"column":12,"nodeType":"112","messageId":"113","endLine":16,"endColumn":20},{"ruleId":"110","severity":1,"message":"135","line":16,"column":22,"nodeType":"112","messageId":"113","endLine":16,"endColumn":33},{"ruleId":"110","severity":1,"message":"111","line":63,"column":33,"nodeType":"112","messageId":"113","endLine":63,"endColumn":38},{"ruleId":"110","severity":1,"message":"136","line":1,"column":16,"nodeType":"112","messageId":"113","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"135","line":9,"column":22,"nodeType":"112","messageId":"113","endLine":9,"endColumn":33},{"ruleId":"110","severity":1,"message":"137","line":10,"column":23,"nodeType":"112","messageId":"113","endLine":10,"endColumn":35},{"ruleId":"110","severity":1,"message":"138","line":11,"column":30,"nodeType":"112","messageId":"113","endLine":11,"endColumn":49},{"ruleId":"110","severity":1,"message":"125","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":18},{"ruleId":"110","severity":1,"message":"139","line":1,"column":16,"nodeType":"112","messageId":"113","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"140","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":13},{"ruleId":"110","severity":1,"message":"141","line":17,"column":12,"nodeType":"112","messageId":"113","endLine":17,"endColumn":23},{"ruleId":"110","severity":1,"message":"142","line":17,"column":25,"nodeType":"112","messageId":"113","endLine":17,"endColumn":39},{"ruleId":"110","severity":1,"message":"143","line":59,"column":14,"nodeType":"112","messageId":"113","endLine":59,"endColumn":22},"no-unused-vars","'items' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["144"],"no-negated-in-lhs",["145"],"'setCount' is assigned a value but never used.",["144"],["145"],"no-dupe-class-members","Duplicate name 'handleChange'.","MethodDefinition","unexpected","'DatePicker' is defined but never used.",["144"],["145"],"'fromDate' is assigned a value but never used.","'setFromDate' is assigned a value but never used.",["144"],["145"],"'pageNo' is assigned a value but never used.","'setPageNo' is assigned a value but never used.","'pageSize' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'Component' is defined but never used.","'setTotalItem' is assigned a value but never used.","'setPageRangeDisplay' is assigned a value but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'oldTerminal' is assigned a value but never used.","'setOldTerminal' is assigned a value but never used.","'findById' is defined but never used.","no-global-assign","no-unsafe-negation"]